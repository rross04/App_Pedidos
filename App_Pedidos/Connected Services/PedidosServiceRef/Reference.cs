//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App_Pedidos.PedidosServiceRef {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PedidosServiceRef.PedidosServiceSoap")]
    public interface PedidosServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarNuevoProducto", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AgregarNuevoProducto(string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarNuevoProducto", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AgregarNuevoProductoAsync(string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerTodosLosProductos", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ObtenerTodosLosProductos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerTodosLosProductos", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ObtenerTodosLosProductosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerProductoPorId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ObtenerProductoPorId(int productoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerProductoPorId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ObtenerProductoPorIdAsync(int productoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarProductoExistente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ActualizarProductoExistente(int productoId, string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarProductoExistente", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ActualizarProductoExistenteAsync(int productoId, string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarProductoPorId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EliminarProductoPorId(int productoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarProductoPorId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EliminarProductoPorIdAsync(int productoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CrearNuevoPedido", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CrearNuevoPedido(int clienteId, string tipoEntrega);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CrearNuevoPedido", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CrearNuevoPedidoAsync(int clienteId, string tipoEntrega);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDetalleAPedido", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AgregarDetalleAPedido(int pedidoId, int productoId, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDetalleAPedido", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AgregarDetalleAPedidoAsync(int pedidoId, int productoId, int cantidad);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegistrarEntregaExpress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RegistrarEntregaExpress(int pedidoId, string direccion, string indicaciones, string telefonoContacto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegistrarEntregaExpress", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RegistrarEntregaExpressAsync(int pedidoId, string direccion, string indicaciones, string telefonoContacto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerListadoCompletoPedidosConCliente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ObtenerListadoCompletoPedidosConCliente();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerListadoCompletoPedidosConCliente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ObtenerListadoCompletoPedidosConClienteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerDetalleDePedidoPorId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ObtenerDetalleDePedidoPorId(int pedidoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ObtenerDetalleDePedidoPorId", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ObtenerDetalleDePedidoPorIdAsync(int pedidoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarEstadoDePedido", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ActualizarEstadoDePedido(int pedidoId, string nuevoEstado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarEstadoDePedido", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ActualizarEstadoDePedidoAsync(int pedidoId, string nuevoEstado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MetodoPrueba", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MetodoPrueba();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MetodoPrueba", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MetodoPruebaAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PedidosServiceSoapChannel : App_Pedidos.PedidosServiceRef.PedidosServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PedidosServiceSoapClient : System.ServiceModel.ClientBase<App_Pedidos.PedidosServiceRef.PedidosServiceSoap>, App_Pedidos.PedidosServiceRef.PedidosServiceSoap {
        
        public PedidosServiceSoapClient() {
        }
        
        public PedidosServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PedidosServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PedidosServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PedidosServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AgregarNuevoProducto(string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible) {
            return base.Channel.AgregarNuevoProducto(nombre, descripcion, precio, categoria, imagenURL, disponible);
        }
        
        public System.Threading.Tasks.Task<string> AgregarNuevoProductoAsync(string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible) {
            return base.Channel.AgregarNuevoProductoAsync(nombre, descripcion, precio, categoria, imagenURL, disponible);
        }
        
        public System.Data.DataSet ObtenerTodosLosProductos() {
            return base.Channel.ObtenerTodosLosProductos();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ObtenerTodosLosProductosAsync() {
            return base.Channel.ObtenerTodosLosProductosAsync();
        }
        
        public System.Data.DataSet ObtenerProductoPorId(int productoId) {
            return base.Channel.ObtenerProductoPorId(productoId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ObtenerProductoPorIdAsync(int productoId) {
            return base.Channel.ObtenerProductoPorIdAsync(productoId);
        }
        
        public string ActualizarProductoExistente(int productoId, string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible) {
            return base.Channel.ActualizarProductoExistente(productoId, nombre, descripcion, precio, categoria, imagenURL, disponible);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarProductoExistenteAsync(int productoId, string nombre, string descripcion, decimal precio, string categoria, string imagenURL, bool disponible) {
            return base.Channel.ActualizarProductoExistenteAsync(productoId, nombre, descripcion, precio, categoria, imagenURL, disponible);
        }
        
        public string EliminarProductoPorId(int productoId) {
            return base.Channel.EliminarProductoPorId(productoId);
        }
        
        public System.Threading.Tasks.Task<string> EliminarProductoPorIdAsync(int productoId) {
            return base.Channel.EliminarProductoPorIdAsync(productoId);
        }
        
        public int CrearNuevoPedido(int clienteId, string tipoEntrega) {
            return base.Channel.CrearNuevoPedido(clienteId, tipoEntrega);
        }
        
        public System.Threading.Tasks.Task<int> CrearNuevoPedidoAsync(int clienteId, string tipoEntrega) {
            return base.Channel.CrearNuevoPedidoAsync(clienteId, tipoEntrega);
        }
        
        public string AgregarDetalleAPedido(int pedidoId, int productoId, int cantidad) {
            return base.Channel.AgregarDetalleAPedido(pedidoId, productoId, cantidad);
        }
        
        public System.Threading.Tasks.Task<string> AgregarDetalleAPedidoAsync(int pedidoId, int productoId, int cantidad) {
            return base.Channel.AgregarDetalleAPedidoAsync(pedidoId, productoId, cantidad);
        }
        
        public string RegistrarEntregaExpress(int pedidoId, string direccion, string indicaciones, string telefonoContacto) {
            return base.Channel.RegistrarEntregaExpress(pedidoId, direccion, indicaciones, telefonoContacto);
        }
        
        public System.Threading.Tasks.Task<string> RegistrarEntregaExpressAsync(int pedidoId, string direccion, string indicaciones, string telefonoContacto) {
            return base.Channel.RegistrarEntregaExpressAsync(pedidoId, direccion, indicaciones, telefonoContacto);
        }
        
        public System.Data.DataSet ObtenerListadoCompletoPedidosConCliente() {
            return base.Channel.ObtenerListadoCompletoPedidosConCliente();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ObtenerListadoCompletoPedidosConClienteAsync() {
            return base.Channel.ObtenerListadoCompletoPedidosConClienteAsync();
        }
        
        public System.Data.DataSet ObtenerDetalleDePedidoPorId(int pedidoId) {
            return base.Channel.ObtenerDetalleDePedidoPorId(pedidoId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ObtenerDetalleDePedidoPorIdAsync(int pedidoId) {
            return base.Channel.ObtenerDetalleDePedidoPorIdAsync(pedidoId);
        }
        
        public string ActualizarEstadoDePedido(int pedidoId, string nuevoEstado) {
            return base.Channel.ActualizarEstadoDePedido(pedidoId, nuevoEstado);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarEstadoDePedidoAsync(int pedidoId, string nuevoEstado) {
            return base.Channel.ActualizarEstadoDePedidoAsync(pedidoId, nuevoEstado);
        }
        
        public string MetodoPrueba() {
            return base.Channel.MetodoPrueba();
        }
        
        public System.Threading.Tasks.Task<string> MetodoPruebaAsync() {
            return base.Channel.MetodoPruebaAsync();
        }
    }
}
